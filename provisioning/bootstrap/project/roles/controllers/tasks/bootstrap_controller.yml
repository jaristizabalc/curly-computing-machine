---
- name: "Wait for the portal to become active"
  uri:
    url: "https://{{ inventory_hostname }}/api/initial-data"
    validate_certs: no
    status_code: 200
  register: result
  until: result.status == 200
  retries: 600
  delay: 10

- name: Refresh in-memory inventory
  meta: refresh_inventory

- name: Prepare Avi credentials
  set_fact:
    avi_credentials: {}

- name: Prepare Avi credentials
  set_fact:
    avi_credentials: "{{ avi_credentials | combine({ item.key: item.value }) }}"
  with_items:
  - { key: 'password', value: "{{ hostvars['jumpbox.pod.lab']['Lab_avi_admin_password'] }}" }
  - { key: 'api_version', value: "{{ result['json']['version']['Version'] }}" }
  - { key: 'controller', value: "{{ avi_creds['controller'] }}" }
  - { key: 'username', value: "{{ avi_creds['username'] }}" }

- name: Update admin user account if required
  avi_useraccount:
    avi_credentials: "{{ avi_credentials }}"
    old_password: "{{ hostvars['jumpbox.pod.lab']['Lab_avi_default_password'] }}"
  ignore_errors: yes

- name: Basic system configuration
  avi_systemconfiguration:
    avi_credentials: "{{ avi_credentials }}"
    welcome_workflow_complete: true
    dns_configuration:
      server_list:
        - addr: "{{ hostvars['jumpbox.pod.lab']['ip_address'] }}"
          type: V4
        - addr: 8.8.4.4
          type: V4
    ntp_configuration:
      ntp_server_list:
        - addr: 0.pool.ntp.org
          type: DNS
        - addr: 1.pool.ntp.org
          type: DNS
        - addr: 2.pool.ntp.org
          type: DNS
        - addr: 3.pool.ntp.org
          type: DNS

- name: Create backup admin account
  avi_api_session:
    avi_credentials: "{{ avi_credentials }}"
    http_method: post
    path: user
    data:
      require_password_confirmation: false
      is_active: true
      is_superuser: true
      access:
        - tenant_ref: '/api/tenant?name=admin'
          role_ref: '/api/role?name=System-Admin'
      default_tenant_ref: '/api/tenant?name=admin'
      name: "{{ hostvars['jumpbox.pod.lab']['Lab_avi_backup_admin_username'] }}"
      username: "{{ hostvars['jumpbox.pod.lab']['Lab_avi_backup_admin_username'] }}"
      password: "{{ hostvars['jumpbox.pod.lab']['Lab_avi_backup_admin_password'] }}"

- name: Remove GUI error regarding backup passphrase
  avi_backupconfiguration:
    avi_credentials: "{{ avi_credentials }}"
    name: Backup-Configuration
    backup_passphrase: "{{ hostvars['jumpbox.pod.lab']['Lab_avi_backup_admin_password'] }}"
    upload_to_remote_host: false

- set_fact:
    pod_id: "{{ inventory_hostname | regex_replace('^controller.pod(\\d+).lab', '\\1') }}"
    pod_domain: "{{ inventory_hostname | regex_replace('controller.','') }}"

- name: Define IPAM Profile (<18.2.6)
  import_role:
    name: avinetworks.aviconfig
  vars:
    avi_credentials: "{{ avi_credentials }}"
    avi_config:
      ipamdnsproviderprofile:
        - name: ipam
          infoblox_profile:
            username: admin
            network_view: default
            wapi_version: '2.0'
            usable_subnets:
              - mask: "{{ hostvars['jumpbox.pod.lab']['Lab_vip_ipam_cidr'].split('/')[1] }}"
                ip_addr:
                  type: V4
                  addr: "{{ hostvars['jumpbox.pod.lab']['Lab_vip_ipam_cidr'].split('/')[0] }}"
            dns_view: default
            password: admin
            ip_address:
              type: V4
              addr: "{{ hostvars['jumpbox.pod.lab']['ip_address'] }}"
          type: IPAMDNS_TYPE_INFOBLOX
          name: ipam
        - name: dns
          internal_profile:
            dns_service_domain:
              - num_dns_ip: 1
                domain_name: "app.{{ pod_domain }}"
                pass_through: true
            ttl: 30
          type: IPAMDNS_TYPE_INTERNAL_DNS
  ignore_errors: true

- name: Define IPAM Profile (18.2.8+)
  import_role:
    name: avinetworks.aviconfig
  vars:
    avi_credentials: "{{ avi_credentials }}"
    avi_config:
      ipamdnsproviderprofile:
        - name: ipam
          infoblox_profile:
            dns_view: default
            ip_address:
              addr: "{{ hostvars['jumpbox.pod.lab']['ip_address'] }}"
              type: V4
            network_view: default
            usable_alloc_subnets:
            - subnet:
                ip_addr:
                  addr: "{{ hostvars['jumpbox.pod.lab']['Lab_vip_ipam_cidr'].split('/')[0] }}"
                  type: V4
                mask: "{{ hostvars['jumpbox.pod.lab']['Lab_vip_ipam_cidr'].split('/')[1] }}"
            username: admin
            password: admin
            wapi_version: '2.0'
          type: IPAMDNS_TYPE_INFOBLOX
        - name: dns
          internal_profile:
            dns_service_domain:
              - num_dns_ip: 1
                domain_name: "app.{{ pod_domain }}"
                pass_through: true
            ttl: 30
          type: IPAMDNS_TYPE_INTERNAL_DNS
  ignore_errors: true

- name: VMware Cloud Connector Setup
  avi_cloud:
    avi_credentials: "{{ avi_credentials }}"
    name: Default-Cloud
    vtype: CLOUD_VCENTER
    dhcp_enabled: true
    vcenter_configuration:
      username: "{{ hostvars['jumpbox.pod.lab']['Lab_vcenter_user'] }}"
      password: "{{ hostvars['jumpbox.pod.lab']['Lab_vcenter_id'] | b64decode }}"
      datacenter: "{{ hostvars['jumpbox.pod.lab']['Lab_dc'] }}"
      management_network: "/api/vimgrnwruntime/?name={{ hostvars['jumpbox.pod.lab']['network'] }}"
      privilege: "WRITE_ACCESS"
      vcenter_url: "{{ hostvars['jumpbox.pod.lab']['Lab_vcenter_host'] }}"
    ipam_provider_ref: "/api/ipamdnsproviderprofile?name=ipam"
    dns_provider_ref: "/api/ipamdnsproviderprofile?name=dns"

- pause:
    minutes: 2

- name: VMware Cloud Connector Setup
  avi_cloud:
    avi_credentials: "{{ avi_credentials }}"
    name: Default-Cloud
    vtype: CLOUD_VCENTER
    dhcp_enabled: true
    vcenter_configuration:
      username: "{{ hostvars['jumpbox.pod.lab']['Lab_vcenter_user'] }}"
      password: "{{ hostvars['jumpbox.pod.lab']['Lab_vcenter_id'] | b64decode }}"
      datacenter: "{{ hostvars['jumpbox.pod.lab']['Lab_dc'] }}"
      management_network: "/api/vimgrnwruntime/?name={{ hostvars['jumpbox.pod.lab']['network'] }}"
      privilege: "WRITE_ACCESS"
      vcenter_url: "{{ hostvars['jumpbox.pod.lab']['Lab_vcenter_host'] }}"
    ipam_provider_ref: "/api/ipamdnsproviderprofile?name=ipam"
    dns_provider_ref: "/api/ipamdnsproviderprofile?name=dns"
    se_group_template_ref: "/api/serviceenginegroup?name=Default-Group"

- name: VMware Default-Group Setup
  avi_serviceenginegroup:
    avi_credentials: "{{ avi_credentials }}"
    name: Default-Group
    mem_reserve: false
    vcenter_folder: "{{ hostvars['jumpbox.pod.lab']['Lab_Id'] }}"
    se_name_prefix: "{{ hostvars['jumpbox.pod.lab']['Lab_Id'] }}{{ pod_id }}"

- name: Define DNS Virtual Service
  import_role:
    name: avinetworks.aviconfig
  vars:
    avi_credentials: "{{ avi_credentials }}"
    avi_config:
      vsvip:
        - name: vsvip_dns
          cloud_ref: '/api/cloud?name=Default-Cloud'
          vip:
            - auto_allocate_ip: true
              ipam_network_subnet:
                subnet:
                  mask: "{{ hostvars['jumpbox.pod.lab']['Lab_vip_ipam_cidr'].split('/')[1] }}"
                  ip_addr:
                    type: V4
                    addr: "{{ hostvars['jumpbox.pod.lab']['Lab_vip_ipam_cidr'].split('/')[0] }}"
              auto_allocate_ip_type: V4_ONLY
      virtualservice:
        - name: "{{ 'vs_dns' }}"
          cloud_ref: '/api/cloud?name=Default-Cloud'
          application_profile_ref: '/api/applicationprofile?name=System-DNS'
          network_profile_ref: '/api/networkprofile/?name=System-UDP-Per-Pkt'
          services:
            - port: 53
            - port: 53
              override_network_profile_ref: '/api/networkprofile/?name=System-TCP-Proxy'
          vsvip_ref: '/api/vsvip?name=vsvip_dns'

- name: Build VIP network details
  avi_api_session:
    avi_credentials: "{{ avi_credentials }}"
    http_method: get
    path: "vsvip?name=vsvip_dns"
  register: dns_vs

- set_fact:
    dns_vs_ip: "{{ dns_vs['obj']['results'][0]['vip'][0]['ip_address']['addr'] }}"

- lineinfile:
    dest: /etc/dnsmasq.conf
    insertafter: EOF
    line: server=/app.{{ pod_domain }}/{{ dns_vs_ip }}
  delegate_to: localhost
  become: true
- lineinfile:
    dest: /etc/dnsmasq.conf
    insertafter: EOF
    line: server=/global.{{ pod_domain }}/{{ dns_vs_ip }}
  delegate_to: localhost
  become: true

- systemd:
    state: restarted
    name: dnsmasq
  delegate_to: localhost
  become: true

- name: Patch systemconfiguration with K8S DNS Virtual Service
  avi_systemconfiguration:
    avi_credentials: "{{ avi_credentials }}"
    avi_api_update_method: patch
    avi_api_patch_op: replace
    dns_virtualservice_refs: "/api/virtualservice/?name=vs_dns"