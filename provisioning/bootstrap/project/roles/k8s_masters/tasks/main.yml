---
- name: Allow everything and enable UFW
  ufw:
    state: disabled
    policy: allow
  ignore_errors: yes
- copy:
    src: /home/ubuntu/.ssh/id_rsa
    dest: /home/aviadmin/.ssh/id_rsa
    owner: aviadmin
    group: aviadmin
    mode: '0600'
- file:
    path: /etc/resolv.conf
    state: absent
- template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
- shell: kubeadm config view
  register: kubeadm_config
  ignore_errors: yes
  changed_when: "kubeadm_config.rc != 0"
- block:
  - name: Wait apt lock to clear
    become: true
    shell: while sudo fuser /var/lib/dpkg/{{ item }} >/dev/null 2>&1; do sleep 1; done;
    with_items:
      - lock
      - lock-frontend
  - apt_key:
      url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
      id: "0x6A030B21BA07F4FB"
  - apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
  - apt:
      name:
        - docker.io
        - kubelet
        - kubeadm
        - kubectl
        - redis-tools
        - jq
        - awscli
        - httpie
        - httping
  - get_url:
      url: https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/linux/cfssl
      dest: /usr/local/bin/cfssl
      mode: '0777'
  - get_url:
      url: https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/linux/cfssljson
      dest: /usr/local/bin/cfssljson
      mode: '0777'
  - file:
      path: /etc/cfssl
      state: directory
  - copy:
      src: "{{ item }}"
      dest: "/etc/cfssl/{{ item }}"
      owner: root
      group: root
      mode: '0644'
    with_items:
      - ca-config.json
      - ca-csr.json
  - shell:
      chdir: /etc/cfssl
      cmd: cfssl gencert -initca -config /etc/cfssl/ca-config.json ca-csr.json | cfssljson -bare ca
      creates: /etc/cfssl/ca.pem
  - file:
      path: /etc/cfssl/ca-key.pem
      owner: root
      group: root
      mode: '0644'
  - copy:
      src: daemon.json
      dest: /etc/docker/daemon.json
  - file:
      path: /etc/systemd/system/docker.service.d
      state: directory
  - systemd:
      name: docker
      state: restarted
      enabled: yes
      daemon_reload: yes
  - user:
      name: aviadmin
      groups: docker
  - debug:
      var: ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0])
  - service:
      name: kubelet
      state: started
      enabled: true
  - template:
      src: kubeadm.j2
      dest: /home/ubuntu/kubeadm.yaml
  - shell: kubeadm init --config=/home/ubuntu/kubeadm.yaml
    register: kubeadm_init
  - file:
      path: "/home/{{ item }}/.kube"
      state: directory
    loop:
      - ubuntu
      - aviadmin
  - copy:
      remote_src: yes
      src: /etc/kubernetes/admin.conf
      dest: "/home/{{ item }}/.kube/config"
      owner: "{{ item }}"
      group: "{{ item }}"
    loop:
      - ubuntu
      - aviadmin
  - shell: kubectl --kubeconfig /etc/kubernetes/admin.conf create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
    register: kubeadm_network
  - shell: kubeadm token list | grep authentication | cut -d' ' -f1
    register: kubeadm_token
  - shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
    register: kubeadm_hash
  - shell: "redis-cli -h jumpbox.pod.lab hset {{ inventory_hostname }} kubeadm_token {{ kubeadm_token.stdout }}"
    register: redis_kubeadm_token
  - shell: "redis-cli -h jumpbox.pod.lab hset {{ inventory_hostname }} kubeadm_hash {{ kubeadm_hash.stdout }}"
    register: redis_kubeadm_hash
  when: kubeadm_config.rc > 0

- shell: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
- shell: helm --kubeconfig /etc/kubernetes/admin.conf repo add stable https://kubernetes-charts.storage.googleapis.com/
- shell: helm --kubeconfig /etc/kubernetes/admin.conf repo update

- copy:
    src: "{{ item }}"
    dest: "/home/ubuntu/{{ item }}"
  loop:
    - kuard.yaml
    - avinetworks.yaml
    - httpbin.yaml
    - juice.yaml
    - sockshop.yaml
    - kubernetes-dashboard.yaml
    - hackazon.yaml
    - dvwa.yaml
    #-jupyter.yaml
- shell: "kubectl --kubeconfig /etc/kubernetes/admin.conf create -f /home/ubuntu/{{ item }}"
  loop:
    - kuard.yaml
    - avinetworks.yaml
    - httpbin.yaml
    - juice.yaml
    - sockshop.yaml
    - kubernetes-dashboard.yaml
    - hackazon.yaml
    - dvwa.yaml
      #-jupyter.yaml